/*! \file */
/*******************************************
 *                                         *
 *  File auto-generated by `::safer_ffi`.  *
 *                                         *
 *  Do not manually edit this file.        *
 *                                         *
 *******************************************/

#ifndef __RUST_KAL_PLUGIN_C__
#define __RUST_KAL_PLUGIN_C__
#ifdef __cplusplus
extern "C" {
#endif


#include <stddef.h>
#include <stdint.h>

/** \brief
 *  Same as [`Vec<T>`][`rust::Vec`], but with guaranteed `#[repr(C)]` layout
 */
typedef struct Vec_uint8 {
    /** <No documentation available> */
    uint8_t * ptr;

    /** <No documentation available> */
    size_t len;

    /** <No documentation available> */
    size_t cap;
} Vec_uint8_t;

/** \brief
 *  Represents an icon resource.
 */
typedef struct CIcon {
    /** \brief
     *  Raw data of the icon as a C-style string.
     *
     *  See [`Self::r#type`] for the type of the meaning of the data.
     */
    Vec_uint8_t data;

    /** \brief
     *  Type of the icon.
     *
     *  Possible values are:
     *  - `0 -> Path`: Icon data is the path to icon.
     *  - `1 -> ExtractFromPath`: Icon data is the path to extract icon from.
     *  - `2 -> Overlay`: Icon data is a combination of two icons where the
     *  the second icon is overlayed on top with half size.
     *  The data is a string with the format "{bottom}<<>>{top}".
     *  - `3 -> Svg`: Icon data is an SVG string.
     *  - `4 -> Builtin`: Icon data is a BuiltinIcon variant.
     *  The data is a string representation of the variant.
     *  Possible values are:
     *  - `BlankFile`
     *  - `FolderOpen`
     *  - `Url`
     *  - `Shell`
     *  - `Shutdown`
     *  - `Restart`
     *  - `SignOut`
     *  - `Hibernate`
     *  - `Sleep`
     *  - `Lock`
     *  - `Calculator`
     *  - `Workflow`
     *  - `Admin`
     *  - `Error`
     *  - `Warning`
     *  - `Code`
     *  - `5 -> Url`: Icon data is a url to an icon.
     */
    uint8_t r#type;
} CIcon_t;


#include <stdbool.h>

/** \brief
 *  Simplified for lighter documentation, but the actual impls
 *  range from `Tuple1` up to `Tuple6`.
 */
typedef struct Tuple2_bool_Vec_uint8 {
    /** <No documentation available> */
    bool _0;

    /** <No documentation available> */
    Vec_uint8_t _1;
} Tuple2_bool_Vec_uint8_t;

/** \brief
 *  Simplified for lighter documentation, but the actual impls
 *  range from `Tuple1` up to `Tuple6`.
 */
typedef struct Tuple2_bool_CIcon {
    /** <No documentation available> */
    bool _0;

    /** <No documentation available> */
    CIcon_t _1;
} Tuple2_bool_CIcon_t;

/** \brief
 *  `Arc<dyn Send + Sync + Fn(A1) -> Ret>`
 */
typedef struct ArcDynFn1_void_void_const_ptr {
    /** <No documentation available> */
    void * env_ptr;

    /** <No documentation available> */
    void (*call)(void *, void const *);

    /** <No documentation available> */
    void (*release)(void *);

    /** <No documentation available> */
    void (*retain)(void *);
} ArcDynFn1_void_void_const_ptr_t;

/** \brief
 *  Represents an action that can be performed by the ResultItem.
 */
typedef struct CAction {
    /** \brief
     *  A unique identifier for this action, as a C string pointer
     */
    Vec_uint8_t id;

    /** \brief
     *  The icon associated with this action, as a C string pointer
     */
    Tuple2_bool_CIcon_t icon;

    /** \brief
     *  Description of what this action does, as a C string pointer
     */
    Tuple2_bool_Vec_uint8_t description;

    /** \brief
     *  Keyboard shortcut definition for this action, as a C string pointer
     *  for example "Ctrl+Shift+P"
     */
    Tuple2_bool_Vec_uint8_t accelerator;

    /** \brief
     *  Function pointer that will be executed when this action is triggered
     */
    ArcDynFn1_void_void_const_ptr_t action;
} CAction_t;

/** \brief
 *  Same as [`Vec<T>`][`rust::Vec`], but with guaranteed `#[repr(C)]` layout
 */
typedef struct Vec_CAction {
    /** <No documentation available> */
    CAction_t * ptr;

    /** <No documentation available> */
    size_t len;

    /** <No documentation available> */
    size_t cap;
} Vec_CAction_t;

/** \brief
 *  Represents a search result item to be displayed in the user interface.
 */
typedef struct CResultItem {
    /** \brief
     *  Unique identifier string for the result item as a C string pointer.
     */
    int8_t const * id;

    /** \brief
     *  Icon path or identifier for the result as a C string pointer.
     */
    CIcon_t icon;

    /** \brief
     *  Main display text for the result item as a C string pointer.
     */
    Vec_uint8_t primary_text;

    /** \brief
     *  Supplementary description text as a C string pointer.
     */
    Vec_uint8_t secondary_text;

    /** \brief
     *  Optional hover text displayed when the user mouses over the item.
     *  A null pointer indicates no tooltip.
     */
    Tuple2_bool_Vec_uint8_t tooltip;

    /** \brief
     *  Pointer to an array of actions that can be performed on this result item.
     */
    Vec_CAction_t actions;

    /** \brief
     *  Relevance score for the result item (higher values indicate greater relevance).
     */
    uint16_t score;
} CResultItem_t;


#ifdef __cplusplus
} /* extern \"C\" */
#endif

#endif /* __RUST_KAL_PLUGIN_C__ */
